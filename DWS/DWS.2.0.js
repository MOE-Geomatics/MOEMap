globalConfig.pointBufferTool = {available: false};globalConfig.extraImageService = {visible: false};globalConfig.usejQueryUITable = false;  //Avoid loading extra javascript filesglobalConfig.usePredefinedMultipleTabs = false; //Avoid loading extra javascript filesglobalConfig.allowMultipleIdentifyResult = false;globalConfig.displayTotalIdentifyCount = false;globalConfig.locationServicesList = [];globalConfig.maxQueryZoomLevel = 11;globalConfig.displayDisclaimer = true;globalConfig.InformationLang = "Information";globalConfig.postIdentifyCallbackName = "SportFish";globalConfig.postConditionsCallbackName = "SportFish";//globalConfig.infoWindowWidth  = '280px';globalConfig.infoWindowWidth  = '320px';globalConfig.infoWindowHeight = '180px';//globalConfig.infoWindowContentHeight = '250px';globalConfig.queryLayerList = [{	url: globalConfig.url + "/0",	tabsTemplate: [{		label: globalConfig.InformationLang,		content:globalConfig.tabsTemplateContent	}]}];var mapConfig = {		orgLatitude: 49.764775,		orgLongitude: -85.323214,		orgzoomLevel: 5,		minMapScale: 5,		maxMapScale: 12,		coor_Status: true,		url: "http://138.218.29.100/ArcGIS/rest/services/DevJerry/DWS/MapServer",		visibleLayerIds: [0],		layerIds:  [0],		searchFields : ["DWSNum"],		withinExtent: false,		maxWidth: 350,		transparency: 1,		addressZoomLevel: 11,		outFields: ["DWSNum", "DWSName", "LastARURL", "LastARYear"]/*,			search: function(){		var name = document.getElementById('map_query').value.trim();		if(name.length === 0){			return;		}		msg.message("Search is running......");		MOEMap.address = name;		name = name.toUpperCase();		if(mapConfig.searchDWSNumber(name)){			return;		}		mapConfig.queryDWSLayerWithMunicipality(name, true);			},	queryDWSLayerWithMunicipality: function(name, requireLocator){		MOEMap.clearMap();		var queryTask = new esri.arcgis.gmaps.QueryTask(mapConfig.url + "/" +  mapConfig.layerIds[0]);		var query = new esri.arcgis.gmaps.Query();		query.returnGeometry = true;		query.outFields = mapConfig.outFields;		query.where = "UPPER(MunName) = '" + name +"'";					queryTask.execute(query, false, function (fset) {			var size = fset.features.length;						if ( size > 0) {				//municipality = municipality.toUpperCase();				var bounds = new GLatLngBounds();				for (var x = 0; x < size; x++) {					var findResult = fset.features[x];					var gLatLng = (findResult.geometry[0]).getLatLng();					bounds.extend(gLatLng);					var attributes = findResult.attributes;					var contents = tabsContentCalcualtor.getContent(attributes, mapConfig.tabs);					var infoWindowOptions = {contentTabs:contents, maxWidth:mapConfig.maxWidth};					var gOverlay = MOEMap.mapExtension.addToMap(findResult, null,infoWindowOptions);					MOEMap.gOverlays.push(gOverlay);				}				mapConfig.queryMunicipality(name, bounds, size, requireLocator);			}else{				if(requireLocator){					mapLocator.locate(name);				}else{					var bounds = new GLatLngBounds();					mapConfig.queryMunicipality(name, bounds, 0, false);									}			}		});							},	specificAddressSearch: function(latitude, longitude, content){		mapConfig.identifyLayerWithPoint(latitude, longitude, content);			},	identifyLayerWithPoint: function(latitude, longitude, content){		var latLng = new GLatLng(latitude, longitude);		var identifyTask = new esri.arcgis.gmaps.IdentifyTask("http://www.appliomaps.lrc.gov.on.ca/ArcGIS/rest/services/MOE/waste/MapServer");		var identifyParameters = new esri.arcgis.gmaps.IdentifyParameters();		identifyParameters.geometry = latLng; 		identifyParameters.tolerance = 1;		identifyParameters.layerIds = [1];// MUNI_SINGLE_LOWER_TIER_2009  mapConfig.layerIds;		identifyParameters.layerOption = "all";		identifyParameters.bounds = MOEMap.gmap.getBounds();		var mapSize = MOEMap.gmap.getSize();		identifyParameters.width = mapSize.width;		identifyParameters.height = mapSize.height;		identifyTask.execute(identifyParameters, function(response, error) {			var idResults = response.identifyResults;			var count = idResults.length;						if (count === 0){				msg.message(mapConfig.NotWithinMunicipality);				return;			}			var index = 0;			if(count >= 2){				for(var i=0; i<count; i++){										var geometrys = idResults[i].feature.geometry;					var geometryLength = idResults[i].feature.geometry.length;					for (var geometryIndex = 0; geometryIndex < geometryLength; geometryIndex++) {						var gpolygon = geometrys[geometryIndex];						if(gpolygon.containsLatLng(latLng)){							index = i;						}					}				}							}			var attributes = idResults[index].feature.attributes;			var municipality = attributes["NAME"];			var name = municipality.toUpperCase();			//console.log("municipality: " + municipality);			mapConfig.queryDWSLayerWithMunicipality(name, false);				});	},		queryMunicipality: function(municipality, bounds, size, requireLocator){						var queryTask = new esri.arcgis.gmaps.QueryTask("http://www.appliomaps.lrc.gov.on.ca/ArcGIS/rest/services/MOE/waste/MapServer/1" );			var query = new esri.arcgis.gmaps.Query();			query.returnGeometry = true;			query.outFields = ["NAME"];			query.where = "UPPER(NAME) = '" + municipality +"'";						queryTask.execute(query, false, function (fset) {				if (fset.features.length > 0) {					for (var polygonIndex = 0; polygonIndex < fset.features.length; polygonIndex++) {						var att = fset.features[polygonIndex].attributes;						for (var geometryIndex = 0; geometryIndex < fset.features[polygonIndex].geometry.length; geometryIndex++) {							var gpolygon = fset.features[polygonIndex].geometry[geometryIndex];							var gpolylineVertexs = [];							for (var i = 0; i < gpolygon.getVertexCount(); i++) {								var gLatLng = gpolygon.getVertex(i);								bounds.extend(gLatLng);								gpolylineVertexs.push(gLatLng);							}							var gPolylineOverlay = new GPolyline(gpolylineVertexs);							if(typeof(mapConfig.twpColor) != "undefined"){								gPolylineOverlay = new GPolyline(gpolylineVertexs, mapConfig.twpColor);							}							MOEMap.gPolylineListOverlay.push(gPolylineOverlay);							MOEMap.gmap.addOverlay(gPolylineOverlay);						}					}					var zoomLevel = MOEMap.gmap.getBoundsZoomLevel(bounds);					MOEMap.gmap.setCenter(bounds.getCenter(), zoomLevel);					if(requireLocator){						msg.message("The residents in <strong>" + MOEMapTools.wordCapitalize(municipality) + "</strong> are supplied by the following <strong>" + size + "</strong> Municipality Drinking Water Systems.");					}else{						if(size === 0){							msg.message("Your location is within <strong>" + MOEMapTools.wordCapitalize(municipality) + "</strong> and the residents in this area are not supplied by the Municipality Drinking Water Systems.");						}else{							msg.message("Your location is within <strong>" + MOEMapTools.wordCapitalize(municipality) + "</strong> and the residents in this area are supplied by the following <strong>" + size + "</strong> Municipality Drinking Water Systems.");						}					}						}			});		},	searchDWSNumber: function(name){		var reg = /^\d+$/;		if((name.length == 9)&&(reg.test(name))){			MOEMap.queryLayerWithWhere("DWSNum  = " + name);			//console.log("DWS number.");			return true;		}		return false;	}*/}   